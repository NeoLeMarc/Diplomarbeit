input metauml;
beginfig(1);

    % Hauptklasse
    Class.MANVConnector("MANVConnector")
            ("-commandQueue: BlockingQueue<MANVCommand>",
             "-eventQueue: BlockingQueue<MANVEvent>",
             "-resultQueue: BlockingQueue<MANVCommand>",
             "-corbaSender: CorbaSender",
             "-commandsImpl: CommandsImpl")
            ("+main(args: String[]): void");

    % ZigBee Krempel
    Class.iZigBit("iZigBit")
            ()
            ("+getNodeID: int",
             "+getMacID: int",
             "+sendData(data: String): MANVResult",
             "+isendData(data: String)",
             "+toggleAlertStatus: MANVResult",
             "+disableAlert: MANVResult",
             "+enableAlert: MANVResult",
             "+muteAlert: MANVResult",
             "+itoggleAlertStatus: void",
             "+idisableAlert: void",
             "+ienableAlert: void",
             "+imuteAlert: void");
    classStereotypes.iZigBit("<<Interface>>");

    Class.readonlyZigBit("readonlyZigBit")
            ("-id: int")
            ("+readOnlyZigBit(nodeID: int)",
            "+getNodeID: int",
            "+getMacID: int",
            "+sendData(data: String): MANVResult",
            "+toggleAlertStatus: void",
            "+enableAlertStatus: void",
            "+disableAlert: void",
            "+muteAlert: void");

    Class.ZigBit("ZigBit")
            ("-zigBitMap: HashMap<Integer, ZigBit>",
             "-macMap: HashMap<Integer, Integer>")
            ("+ZigBit(nodeID : int)",
            "+getNodeID: int",
            "+getMacID: int",
            "+setCommandQueue(commandQueue: BlockingQueue<MANVCommand>)",
            "+get(id: int): iZigBit",
            "+getByMacID(macID: int): iZigBit",
            "+discover: iZigBit",
            "+sendData(data: String): MANVResult",
            "+sendUntilSuccess(data: String): MANVResult",
            "+toggleAlertStatus: MANVResult",
            "+enableAlertStatus: MANVResult",
            "+disableAlert: MANVResult",
            "+mutAlert: MANVResult",
            "-requestMacID: int");


    
    leftToRight.top(100)(iZigBit, MANVConnector);
    topToBottom(45)(iZigBit, readonlyZigBit);
    leftToRight.top(45)(readonlyZigBit, ZigBit);

    drawObjects(MANVConnector, iZigBit, readonlyZigBit, ZigBit);
    link(inheritance)(pathStepY(readonlyZigBit.n, iZigBit.s, 20));
    link(inheritance)(pathStepY(ZigBit.n, iZigBit.s, 20));


    Class.CORBA_Node("CORBA_Node")
            ()
            ();

    Class.CommandsImpl("CommandsImpl")
            ()
            ("+disableAlert(node: CORBA_Node)",
            "+enableAlert(node: CORBA_Node)",
            "+toggleAlert(node: CORBA_Node)",
            "+mute(node: CORBA_Node)");

    leftToRight.top(200)(MANVConnector, CommandsImpl);
    topToBottom(45)(CORBA_Node, CommandsImpl);
    drawObjects(CORBA_Node, CommandsImpl);
    link(inheritance)(pathStepY(CommandsImpl.n, CORBA_Node.s, 20));

    Class.BlockingQueueMANVEvent("BlockingQueue<MANVEvent>")
            ()
            ();

    Class.BlockingQueueMANVCommand("BlockingQueue<MANVCommand>")
            ()
            ();

    topToBottom(45)(BlockingQueueMANVEvent, MANVConnector);
    leftToRight.top(60)(BlockingQueueMANVEvent, BlockingQueueMANVCommand);
    drawObjects(BlockingQueueMANVEvent, BlockingQueueMANVCommand);

    % Threads
    Class.Thread("Thread")
            ()
            ("run: void");

%    leftToRight.top(500)(Comparable, Thread);


    Class.SocketReader("SocketReader")
            ("-eventQueue: BlockingQueue<MANVEvent>",
            "-lastResult: MANVResult",
            "-resultSemaphore: Semaphore",
            "-serialIn: BufferReader")
            ("+SocketReader(serialIn: BufferedReader, eventQueue: BlockingQueue<MANVEvent>)",
            "+setLastResult(MANVResult: result)",
            "+getLastResult(MANVResult: result)",
            "run: void");

    Class.SocketWriter("SocketWriter")
            ("-commandQueue: BlockingQueue<MANVCommand>",
            "-resultQueue: BlockingQueue<MANVCommand>",
            "-serialOut: PrintWriter",
            "-reader: SocketReader",
            "-lastResult: MANVResult")
            ("+SocketWriter(serialOut: PrintWriter, commandQueue: <MANVCommand>, reader: SocketReader)",
            "+writeLine(line: String)",
            "+run: void");

    Class.CorbaSender("CorbaSender")
            ("-eventQueue: BlockingQueue<MANVEvent>",
            "-serverIncoming: Incoming")
            ("+CorbaSender(eventQueue: BlockingQueue<MANVEvent>, serverIncoming: Incoming)",
            "+run: void");

    topToBottom(45)(Thread, SocketWriter);
    topToBottom(45)(SocketWriter, BlockingQueueMANVEvent);
    leftToRight.top(45)(SocketReader, SocketWriter, CorbaSender);
    drawObjects(Thread, SocketReader, SocketWriter, CorbaSender);
    link(inheritance)(pathStepY(SocketReader.n, Thread.s, 20));
    link(inheritance)(pathStepY(SocketWriter.n, Thread.s, 20));
    link(inheritance)(pathStepY(CorbaSender.n, Thread.s, 20));

    % Events
    Class.Comparable("Comparable")
            ()
            ("+compareTo(o: object): int");
    classStereotypes.Comparable("<<interface>>");
    leftToRight(45)(Comparable, readonlyZigBit);
    drawObjects(Comparable);


    Class.MANVPrioritized("MANVPrioritized")
            ("#priority: int")
            ("+compareTo(o: MANVPrioritized): int",
            "+compareTo(o: object): int");

    topToBottom(45)(Comparable, MANVPrioritized);
    drawObject(MANVPrioritized);
    link(inheritance)(pathStepY(MANVPrioritized.n, Comparable.s, 20));

    Class.MANVEvent("MANVEvent")
            ("-raw: String")
            ("+MANVEvent(raw: String)",
            "+isResult: boolean",
            "+isImportant: boolean",
            "+fromString(raw: String): MANVEvent",
            "+createCorbaMessages: AbstractList<CorbaMessageContainer>",
            "+toString: String",
            "+getRaw: String");

    topToBottom(45)(MANVPrioritized, MANVEvent);
    drawObject(MANVEvent);
    link(inheritance)(pathStepY(MANVEvent.n, MANVPrioritized.s, 20));

    
    Class.MANVResult("MANVResult")
            ("#status: boolean",
            "#subResult: MANVResult")
            ("+MANVResult(raw: String, subResult: MANVResult)",
            "+getData: String",
            "+isResult: boolean",
            "+isImportant: boolean",
            "+isComposite: boolean",
            "+getChildList(commandQueue: BlockingQueue<MANVCommand>): AbstractList<CorbaMessageContainer>",
            "+getSubResult(result: MANVResult, toString: String): MANVResult");

    Class.MANVCommand("MANVCommand")
            ("#command: String",
            "-result: MANVResult",
            "#id: int",
            "#maxId: static int",
            "-resultLatch: CountDownLatch")
            ("+MANVCommand(command: String, priority: int)",
            "+getCommand: String",
            "-getUniqueId: int",
            "+setResult(result: MANVResult)",
            "+getResult: MANVResult");

    topToBottom(45)(MANVEvent, MANVResult);
    leftToRight.top(45)(MANVCommand, MANVEvent);
    drawObjects(MANVResult, MANVCommand);
    link(inheritance)(pathStepY(MANVResult.n, MANVEvent.s, 20));
    link(inheritance)(pathStepY(MANVCommand.n, MANVPrioritized.s, 20));

    Class.MANVDataReceived("MANVDataReceived")
            ("-source: iZigBit",
            "-data: String")
            ("+MANVDataReceived(raw: String)",
            "+isImportant: boolean",
            "+parseRaw(raw: String)");

    Class.MANVChildLost("MANVChildLost")
            ("#source: iZigBit")
            ("+MANVChildLost(raw: String)",
            "+isImportant: boolean",
            "+createCorbaMessages: AbstractList<CorbaMessageContainer>");

    Class.MANVChildJoined("MANVChildJoined")
            ("#source: iZigBit")
            ("+MANVChildLost(raw: String)",
            "+isImportant: boolean",
            "+createCorbaMessages: AbstractList<CorbaMessageContainer>");

    leftToRight.top(90)(MANVResult, MANVDataReceived);
    leftToRight.top(45)(MANVDataReceived, MANVChildLost, MANVChildJoined);
    drawObjects(MANVDataReceived, MANVChildLost, MANVChildJoined);
    link(inheritance)(pathStepY(MANVDataReceived.n, MANVEvent.s, 20));
    link(inheritance)(pathStepY(MANVChildLost.n, MANVEvent.s, 20));
    link(inheritance)(pathStepY(MANVChildJoined.n, MANVEvent.s, 20));


    Class.MANVStatusMessage("MANVStatusMessage")
            ("#pulse: short",
            "#breathing: short",
            "-alertStatus: HashMap<Integer, Integer>")
            ("+MANVStatusMessage(raw: String)",
            "+parseRaw(raw: String)",
            "+createCorbaMessages: AbstractList<CorbaMessageContainer>",
            "+toString: String");

    topToBottom(110)(MANVDataReceived, MANVStatusMessage);
    drawObject(MANVStatusMessage);
    link(inheritance)(pathStepY(MANVStatusMessage.n, MANVDataReceived.s, 20));

    Class MANVGsn("MANVGsn")
            ("-myRaw: String")
            ("+MANVGsn(raw: String)",
            "+isCcomposite: boolean",
            "+getData: String",
            "+addSubResult(result: MANVResult)");

    Class MANVChildrenList("MANVChildrenList")
            ()
            ("+MANVChildrenList(raw: String)",
            "+isComposite: boolean",
            "+getChildList(commandQueue: BlockingQueue<MANVCommand>",
            "+addSubResult(result: MANVResult)");

    leftToRight.top(45)(MANVChildrenList, MANVGsn, MANVStatusMessage);
    drawObjects(MANVGsn, MANVChildrenList);
    link(inheritance)(pathStepY(MANVGsn.n, MANVResult.s, 20));
    link(inheritance)(pathStepY(MANVChildrenList.n, MANVResult.s, 20));



    % Corba
    Class.CorbaMessageContainer("CorbaMessageContainer")
            ()
            ("+send(serverIncoming: Incoming)");

    Class.CorbaDataMessageContainer("CorbaDataMessageContainer")
            ("-message: CORBA_DataMessage")
            ("+CorbaDataMessageContainer(message: CORBA_DataMessage)",
            "+send(serverIncoming: Incoming)",
            "+toString: String");

    Class.CorbaEventMessageContainer("CorbaEventMessageContainer")
            ("-message: CORBA_EventMessage")
            ("+send(serverIncoming: Incoming)",
            "+toString: String)");

    topToBottom(45)(CorbaMessageContainer, CorbaDataMessageContainer);
    leftToRight.top(45)(MANVStatusMessage, CorbaDataMessageContainer, CorbaEventMessageContainer);
    drawObjects(CorbaMessageContainer, CorbaDataMessageContainer, CorbaEventMessageContainer);
    link(inheritance)(pathStepY(CorbaDataMessageContainer.n, CorbaMessageContainer.s, 20));
    link(inheritance)(pathStepY(CorbaEventMessageContainer.n, CorbaMessageContainer.s, 20));



    % Assoziationen
%    link(association)(BlockingQueueMANVEvent.s -- MANVConnector.n);
%    link(association)(BlockingQueueMANVCommand.s -- MANVConnector.e);
    clink(association)(BlockingQueueMANVEvent, MANVConnector);

%    clink(association)(BlockingQueueMANVCommand, MANVConnector);
    link(association)(pathStepX(BlockingQueueMANVCommand.s, MANVConnector.ne - (0, 20), 20));

    link(association)(pathManhattanX(MANVResult.w, MANVCommand.s));

    path a;
    a := pathStepX(MANVResult.w - (0, 20), SocketWriter.sw + (20, -40), -180) -- SocketWriter.sw + (20, 0);
    link(association)(a);

    % Auch hier brauchen wir einen ARC.
    pair al, bl, ol, startingPoint;
    path crossingLine, b, c, d;

    startingPoint := BlockingQueueMANVCommand.n + (20, 7);

    bl := startingPoint + (0, 25);
    al := startingPoint + (0, 15);
    ol := startingPoint + (5, 18);
    crossingLine := al .. ol .. bl;

    % Parts before and after crossing
    b := pathManhattanX(BlockingQueueMANVCommand.n, startingPoint) -- pathManhattanX(startingPoint, al);
    c := pathManhattanY(bl, SocketWriter.e + (0, 40));

    % Combine all of above
    d := b -- crossingLine -- c;

    link(association)(d);

    link(association)(pathHorizontal(CommandsImpl.w - (0, 20), MANVConnector.right));

    % TBD
    link(association)(pathStepX(MANVResult.sw + (0, 20), SocketReader.w, -200));

    % Crossing Lines is a little bit... nasty
    % Create the crossing-Arc
    bl := MANVDataReceived.nw + (-20, 25);
    al := MANVDataReceived.nw + (-20, 15);
    ol := MANVDataReceived.nw + (-15, 18);
    crossingLine := al .. ol .. bl;

    % Parts before and after crossing
    b := pathManhattanX(MANVDataReceived.w, al);
    startingPoint := bl + (0, 345);
    c := bl --startingPoint;

    % Combine all of above
    d := b -- crossingLine -- c;

    % Another crossing
    bl := startingPoint + (0, 25);
    al := startingPoint + (0, 15);
    ol := startingPoint + (5, 18);
    crossingLine := al .. ol .. bl;

    % Parts before and after crossing
    b := startingPoint -- al;
    c := pathManhattanY(bl, iZigBit.se + (0, 20));

    d := d -- b -- crossingLine -- c; 

    %%%%%%%% Draw Link
    link(association)(d);


    % Create the crossing-Arc
    startingPoint := MANVChildLost.ne + (20, 0);

    bl := startingPoint + (0, 25);
    al := startingPoint + (0, 15);
    ol := startingPoint + (5, 18);
    crossingLine := al .. ol .. bl;

    % Parts before and after crossing
    b := pathManhattanX(MANVChildLost.e, startingPoint) -- pathManhattanX(startingPoint, al);
    c := pathManhattanY(bl, iZigBit.se + (0, 40));

    % Combine all of above
    d := b -- crossingLine -- c;

    %%% Draw Link
    link(association)(d);

    %% SocketReader -> MANVConnector
    % Create the crossing-Arc
    startingPoint := SocketReader.s - (0, 60);

    bl := startingPoint + (0, 25);
    al := startingPoint + (0, 15);
    ol := startingPoint + (-5, 18);
    crossingLine := al .. ol .. bl;

    % Parts before and after crossing
    b := rpathManhattanX(SocketReader.s, bl);
    c := pathManhattanX(BlockingQueueMANVEvent.w, al);

    % Combine all of above
    d := c -- crossingLine -- b;

    link(association)(d);

    % BlockingQueueMANVEvent -> CorbaSender
    link(association)(pathStepX(BlockingQueueMANVEvent.e, CorbaSender.s + (0, -60), 40) -- CorbaSender.s);

    % MANVEvent -> CorbaMessageContainer
    pair ep; 
    
    startingPoint := CorbaMessageContainer.w - (216, 0);
    bl            := startingPoint - (20, 0);
    al            := startingPoint - (30, 0);
    crossingLine  := startingPoint - (25, -5);
    ep            := startingPoint - (160, 0);

    d := CorbaMessageContainer.w -- startingPoint -- bl .. crossingLine .. al -- ep;

    % Nächste Kreuzung...
    startingPoint := ep + (0, 117); 
    al            := startingPoint + (0, 20);
    bl            := startingPoint + (0, 30);
    crossingLine  := startingPoint + (5, 25);

    d := d -- startingPoint -- al .. crossingLine .. bl -- pathManhattanY(bl, MANVEvent.e);
    
    link(association)(d);

    % Beschriftungen
    item(iGuard)("eventQueue")(obj.nw = BlockingQueueMANVEvent.s + (0, -15));
    item(iGuard)("eventQueue")(obj.n  = CorbaSender.s - (80, 50));
    item(iGuard)("eventQueue")(obj.e  = SocketReader.s - (-80, 50));
    item(iGuard)("result")(obj.e = SocketWriter.sw - (30, 35));
    item(iGuard)("result")(obj.e = SocketReader.w - (20, -6));
    item(iGuard)("result")(obj.e = MANVResult.nw - (40, 0));
    item(iGuard)("corbaMessages")(obj.w = MANVEvent.e + (20, 5));
    item(iGuard)("source")(obj.w = MANVDataReceived.nw + (-20, 40));
    item(iGuard)("source")(obj.e = MANVChildLost.ne + (42, 40));
    item(iGuard)("commandQueue")(obj.w = MANVConnector.ne + (10, -16));
    item(iGuard)("commandsImpl")(obj.w = MANVConnector.ne + (10, -48));
    item(iGuard)("commandQueue")(obj.w = SocketWriter.se + (24, -2));


endfig;
end




