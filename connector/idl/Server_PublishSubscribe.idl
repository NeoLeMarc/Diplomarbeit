#include "Common.idl"

module CORBA_Server
{
  // Client (GUI) Callback-Interface
  interface Subscriber
  {
    // informiert den Subscriber über neue Daten
    void notify_data(in Common::CORBA_DataMessage data);
    // informiert den Subscriber über ein neues Ereignis
    void notify_event(in Common::CORBA_EventMessage event);
  };
   
  valuetype Filter
  {
    private Subscriber sub;
    private unsigned long registered_events;
    
    readonly attribute Subscriber getSubscriber;
    readonly attribute long getRegistered_events;
       
    attribute boolean alarm_pulse;
    attribute boolean alarm_breathing;
    attribute boolean low_battery;
    attribute boolean join;
    attribute boolean left;
    attribute boolean lost;
    attribute boolean data;
    
    factory init(in Subscriber s, in unsigned long registered_events);
    
    // informiert den Subscriber sub über neue Daten
    void notify_data(in Common::CORBA_DataMessage data);
    // informiert den Subscriber sub über ein neues Ereignis
    void notify_event(in Common::CORBA_EventMessage event);
  };
  
  interface Publisher
  {
    // registriert den Subscriber beim Publisher (Server) und legt den Standardfilter fest
    void register(in Filter defaultFilter);
    
    // entfernt den Subscriber
    void unregister(in Subscriber sub);
    
    // legt den Standardfilter für diesen Subscriber fest (ersetzt den Alten)
    void setDefaultFilter_Global(in Filter defaultFilter);
    void setDefaultFilter_Group(in Filter defaultFilter, in Common::GroupID_t group_id);
    
    // ersetzt alle Filter aller bekannten Nodes
    void setFilter_Global(in Filter f);
    
    // ersetzt alle Filter der Nodes der angegebenen Gruppe
    void setFilter_Group(in Filter f, in Common::GroupID_t group_id);
    
    // ersetzt den Filter der angegebenen Node
    void setFilter_Node(in Filter f, in Common::CORBA_Node node);
  };
};