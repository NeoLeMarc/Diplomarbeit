Archive member included because of file (symbol)

/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
                              ARM Flash Debug/main.o (__udivsi3)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
                              ARM Flash Debug/main.o (snprintf)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
                              ARM Flash Debug/main.o (malloc)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o) (memcpy)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o) (memset)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
                              ARM Flash Debug/main.o (printf)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o) (__vfprintf)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o) (strlen)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o) (__hex_uc)

Memory Configuration

Name             Origin             Length             Attributes
UNPLACED_SECTIONS 0xffffffff         0x00000000         xw
Memory_Mapped_Registers 0xffff0000         0x00010000         xw
FLASH            0x00080000         0x0000f800         xr
SRAM             0x00010000         0x00002000         xw
*default*        0x00000000         0xffffffff

Linker script and memory map

                0xffff0000                __Memory_Mapped_Registers_segment_start__ = 0xffff0000
                0x00000000                __Memory_Mapped_Registers_segment_end__ = 0x0
                0x00080000                __FLASH_segment_start__ = 0x80000
                0x0008f800                __FLASH_segment_end__ = 0x8f800
                0x00010000                __SRAM_segment_start__ = 0x10000
                0x00012000                __SRAM_segment_end__ = 0x12000
                0x00000400                __STACKSIZE__ = 0x400
                0x00000100                __STACKSIZE_IRQ__ = 0x100
                0x00000100                __STACKSIZE_FIQ__ = 0x100
                0x00000000                __STACKSIZE_SVC__ = 0x0
                0x00000000                __STACKSIZE_ABT__ = 0x0
                0x00000000                __STACKSIZE_UND__ = 0x0
                0x00000400                __HEAPSIZE__ = 0x400
                0x00010000                __vectors_ram_load_start__ = __SRAM_segment_start__

.vectors_ram    0x00010000       0x3c
                0x00010000                __vectors_ram_start__ = .
 *(.vectors_ram)
                0x0001003c                . = ((__vectors_ram_start__ + 0x3c) MAX_K .)
 *fill*         0x00010000       0x3c 00
                0x0001003c                __vectors_ram_end__ = (__vectors_ram_start__ + SIZEOF (.vectors_ram))
                0x00000001                . = ASSERT (((__vectors_ram_end__ >= __SRAM_segment_start__) && (__vectors_ram_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .vectors_ram is too large to fit in SRAM memory segment)
                0x00080000                __vectors_load_start__ = __FLASH_segment_start__

.vectors        0x00080000       0x3c
                0x00080000                __vectors_start__ = .
 *(.vectors .vectors.*)
 .vectors       0x00080000       0x3c ARM Flash Debug/Analog_ADuC7000_Startup.o
                0x00080000                _vectors
                0x0008003c                __vectors_end__ = (__vectors_start__ + SIZEOF (.vectors))
                0x00000001                . = ASSERT (((__vectors_end__ >= __FLASH_segment_start__) && (__vectors_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .vectors is too large to fit in FLASH memory segment)
                0x0008003c                __init_load_start__ = (__vectors_end__ ALIGN 0x4)

.init           0x0008003c      0x234
                0x0008003c                __init_start__ = .
 *(.init .init.*)
 *fill*         0x0008003c        0x4 00
 .init          0x00080040      0x1d0 ARM Flash Debug/crt0.o
                0x00080040                __start
                0x00080040                _start
 .init          0x00080210       0x60 ARM Flash Debug/Analog_ADuC7000_Startup.o
                0x00080210                reset_handler
                0x00080254                undef_handler
                0x0008025c                pabort_handler
                0x00080260                dabort_handler
                0x00080258                swi_handler
                0x00080268                fiq_handler
                0x00080270                __init_end__ = (__init_start__ + SIZEOF (.init))
                0x00000001                . = ASSERT (((__init_end__ >= __FLASH_segment_start__) && (__init_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .init is too large to fit in FLASH memory segment)
                0x00080270                __text_load_start__ = (__init_end__ ALIGN 0x4)

.text           0x00080270     0x1490
                0x00080270                __text_start__ = .
 *(.text .text.* .glue_7t .glue_7 .gnu.linkonce.t.* .gcc_except_table)
 .text          0x00080270      0x4ac ARM Flash Debug/main.o
                0x000803d8                __putchar
                0x0008041c                parseCommand
                0x000805d8                main
 .glue_7        0x0008071c        0x0 ARM Flash Debug/main.o
 .glue_7t       0x0008071c        0x0 ARM Flash Debug/main.o
 .text          0x0008071c        0x0 ARM Flash Debug/crt0.o
 .glue_7        0x0008071c        0x0 ARM Flash Debug/crt0.o
 .glue_7t       0x0008071c        0x0 ARM Flash Debug/crt0.o
 .text          0x0008071c        0x0 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .glue_7        0x0008071c        0x0 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .glue_7t       0x0008071c        0x0 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .text          0x0008071c      0x2ec ARM Flash Debug/Analog_ADuC7000.o
                0x0008089c                ctl_unmask_isr
                0x000809e8                ctl_get_ticks_per_second
                0x000807dc                ctl_set_isr
                0x0008096c                ctl_start_timer
                0x00080878                irq_handler
                0x000808dc                ctl_mask_isr
 .glue_7        0x00080a08        0x0 ARM Flash Debug/Analog_ADuC7000.o
 .glue_7t       0x00080a08        0x0 ARM Flash Debug/Analog_ADuC7000.o
 .text          0x00080a08      0x124 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
                0x00080a84                ctl_board_on_button_pressed
                0x00080a08                ctl_board_init
                0x00080adc                ctl_board_set_leds
 .glue_7        0x00080b2c        0x0 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .glue_7t       0x00080b2c        0x0 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .text          0x00080b2c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
 *fill*         0x00080b2c        0x4 00
 .text.libc     0x00080b30       0x30 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
                0x00080b30                __int32_udiv
                0x00080b30                __int32_udivmod
                0x00080b30                __udivsi3
 .glue_7        0x00080b60        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
 .glue_7t       0x00080b60        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
 .text          0x00080b60        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .text.libc     0x00080b60       0x40 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
                0x00080b60                snprintf
 .glue_7        0x00080ba0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .glue_7t       0x00080ba0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .text          0x00080ba0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .text.libc     0x00080ba0      0x228 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
                0x00080ba0                malloc
                0x00080d9c                calloc
                0x00080d58                realloc
                0x00080c68                free
 .glue_7        0x00080dc8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .glue_7t       0x00080dc8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .text          0x00080dc8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
 *fill*         0x00080dc8        0x8 00
 .text.libc     0x00080dd0       0x60 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
                0x00080dd0                memcpy
 .glue_7        0x00080e30        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
 .glue_7t       0x00080e30        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
 .text          0x00080e30        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
 .text.libc     0x00080e30       0xa0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
                0x00080e30                memset
 .glue_7        0x00080ed0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
 .glue_7t       0x00080ed0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
 .text          0x00080ed0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .text.libc     0x00080ed0       0x4c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
                0x00080ed0                printf
 .glue_7        0x00080f1c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .glue_7t       0x00080f1c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .text          0x00080f1c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .text.libc     0x00080f1c      0x780 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
                0x00080fd8                __vfprintf
 .glue_7        0x0008169c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .glue_7t       0x0008169c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .text          0x0008169c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)
 *fill*         0x0008169c        0x4 00
 .text.libc     0x000816a0       0x60 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)
                0x000816a0                strlen
 .glue_7        0x00081700        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)
 .glue_7t       0x00081700        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)
 .text          0x00081700        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
 .text.libc     0x00081700        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
 .glue_7        0x00081700        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
 .glue_7t       0x00081700        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
                0x00081700                __text_end__ = (__text_start__ + SIZEOF (.text))
                0x00000001                . = ASSERT (((__text_end__ >= __FLASH_segment_start__) && (__text_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .text is too large to fit in FLASH memory segment)
                0x00081700                __dtors_load_start__ = (__text_end__ ALIGN 0x4)

.dtors          0x00081700        0x0
                0x00081700                __dtors_start__ = .
 *(SORT(.dtors.*))
 *(.dtors)
                0x00081700                __dtors_end__ = (__dtors_start__ + SIZEOF (.dtors))
                0x00000001                . = ASSERT (((__dtors_end__ >= __FLASH_segment_start__) && (__dtors_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .dtors is too large to fit in FLASH memory segment)
                0x00081700                __ctors_load_start__ = (__dtors_end__ ALIGN 0x4)

.ctors          0x00081700        0x0
                0x00081700                __ctors_start__ = .
 *(SORT(.ctors.*))
 *(.ctors)
                0x00081700                __ctors_end__ = (__ctors_start__ + SIZEOF (.ctors))
                0x00000001                . = ASSERT (((__ctors_end__ >= __FLASH_segment_start__) && (__ctors_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .ctors is too large to fit in FLASH memory segment)
                0x00081700                __rodata_load_start__ = (__ctors_end__ ALIGN 0x4)

.rodata         0x00081700       0x7c
                0x00081700                __rodata_start__ = .
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata        0x00081700       0x5c ARM Flash Debug/main.o
 .rodata.libc   0x0008175c       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
                0x0008175c                __hex_uc
                0x0008176c                __hex_lc
                0x0008177c                __rodata_end__ = (__rodata_start__ + SIZEOF (.rodata))
                0x00000001                . = ASSERT (((__rodata_end__ >= __FLASH_segment_start__) && (__rodata_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .rodata is too large to fit in FLASH memory segment)
                0x0008177c                __fast_load_start__ = (__rodata_end__ ALIGN 0x4)

.fast           0x0001003c        0x0 load address 0x0008177c
                0x0001003c                __fast_start__ = .
 *(.fast .fast.*)
                0x0001003c                __fast_end__ = (__fast_start__ + SIZEOF (.fast))
                0x0008177c                __fast_load_end__ = (__fast_load_start__ + SIZEOF (.fast))
                0x00000001                . = ASSERT ((((__fast_load_start__ + SIZEOF (.fast)) >= __FLASH_segment_start__) && ((__fast_load_start__ + SIZEOF (.fast)) <= (__FLASH_segment_start__ + 0xf800))), error: .fast is too large to fit in FLASH memory segment)

.fast_run       0x0001003c        0x0
                0x0001003c                __fast_run_start__ = .
                0x0001003c                . = ((__fast_run_start__ + SIZEOF (.fast)) MAX_K .)
                0x0001003c                __fast_run_end__ = (__fast_run_start__ + SIZEOF (.fast_run))
                0x00000001                . = ASSERT (((__fast_run_end__ >= __SRAM_segment_start__) && (__fast_run_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .fast_run is too large to fit in SRAM memory segment)
                0x0008177c                __data_load_start__ = ((__fast_load_start__ + SIZEOF (.fast)) ALIGN 0x4)

.data           0x0001003c        0x4 load address 0x0008177c
                0x0001003c                __data_start__ = .
 *(.data .data.* .gnu.linkonce.d.*)
 .data          0x0001003c        0x0 ARM Flash Debug/main.o
 .data          0x0001003c        0x0 ARM Flash Debug/crt0.o
 .data          0x0001003c        0x0 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .data          0x0001003c        0x0 ARM Flash Debug/Analog_ADuC7000.o
 .data          0x0001003c        0x0 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .data          0x0001003c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
 .data          0x0001003c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .data          0x0001003c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .data.libc     0x0001003c        0x4 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .data          0x00010040        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
 .data          0x00010040        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
 .data          0x00010040        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .data          0x00010040        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .data          0x00010040        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)
 .data          0x00010040        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
                0x00010040                __data_end__ = (__data_start__ + SIZEOF (.data))
                0x00081780                __data_load_end__ = (__data_load_start__ + SIZEOF (.data))
                0x00081780                __FLASH_segment_used_end__ = (((__fast_load_start__ + SIZEOF (.fast)) ALIGN 0x4) + SIZEOF (.data))
                0x00000001                . = ASSERT ((((__data_load_start__ + SIZEOF (.data)) >= __FLASH_segment_start__) && ((__data_load_start__ + SIZEOF (.data)) <= (__FLASH_segment_start__ + 0xf800))), error: .data is too large to fit in FLASH memory segment)

.data_run       0x0001003c        0x4
                0x0001003c                __data_run_start__ = .
                0x00010040                . = ((__data_run_start__ + SIZEOF (.data)) MAX_K .)
 *fill*         0x0001003c        0x4 00
                0x00010040                __data_run_end__ = (__data_run_start__ + SIZEOF (.data_run))
                0x00000001                . = ASSERT (((__data_run_end__ >= __SRAM_segment_start__) && (__data_run_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .data_run is too large to fit in SRAM memory segment)
                0x00010040                __bss_load_start__ = (__data_run_end__ ALIGN 0x4)

.bss            0x00010040       0x68
                0x00010040                __bss_start__ = .
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss           0x00010040        0x0 ARM Flash Debug/main.o
 .bss           0x00010040        0x0 ARM Flash Debug/crt0.o
 .bss           0x00010040        0x0 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .bss           0x00010040       0x64 ARM Flash Debug/Analog_ADuC7000.o
 .bss           0x000100a4        0x4 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)
 .bss           0x000100a8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)
 *(COMMON)
                0x000100a8                __bss_end__ = (__bss_start__ + SIZEOF (.bss))
                0x00000001                . = ASSERT (((__bss_end__ >= __SRAM_segment_start__) && (__bss_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .bss is too large to fit in SRAM memory segment)
                0x000100a8                __non_init_load_start__ = (__bss_end__ ALIGN 0x4)

.non_init       0x000100a8        0x0
                0x000100a8                __non_init_start__ = .
 *(.non_init .non_init.*)
                0x000100a8                __non_init_end__ = (__non_init_start__ + SIZEOF (.non_init))
                0x00000001                . = ASSERT (((__non_init_end__ >= __SRAM_segment_start__) && (__non_init_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .non_init is too large to fit in SRAM memory segment)
                0x000100a8                __heap_load_start__ = (__non_init_end__ ALIGN 0x4)

.heap           0x000100a8      0x400
                0x000100a8                __heap_start__ = .
 *(.heap)
                0x000104a8                . = (((__heap_start__ + __HEAPSIZE__) MAX_K .) ALIGN 0x4)
 *fill*         0x000100a8      0x400 00
                0x000104a8                __heap_end__ = (__heap_start__ + SIZEOF (.heap))
                0x00000001                . = ASSERT (((__heap_end__ >= __SRAM_segment_start__) && (__heap_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .heap is too large to fit in SRAM memory segment)
                0x000104a8                __stack_load_start__ = (__heap_end__ ALIGN 0x4)

.stack          0x000104a8      0x400
                0x000104a8                __stack_start__ = .
 *(.stack)
                0x000108a8                . = (((__stack_start__ + __STACKSIZE__) MAX_K .) ALIGN 0x4)
 *fill*         0x000104a8      0x400 00
                0x000108a8                __stack_end__ = (__stack_start__ + SIZEOF (.stack))
                0x00000001                . = ASSERT (((__stack_end__ >= __SRAM_segment_start__) && (__stack_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack is too large to fit in SRAM memory segment)
                0x000108a8                __stack_irq_load_start__ = (__stack_end__ ALIGN 0x4)

.stack_irq      0x000108a8      0x100
                0x000108a8                __stack_irq_start__ = .
 *(.stack_irq)
                0x000109a8                . = (((__stack_irq_start__ + __STACKSIZE_IRQ__) MAX_K .) ALIGN 0x4)
 *fill*         0x000108a8      0x100 00
                0x000109a8                __stack_irq_end__ = (__stack_irq_start__ + SIZEOF (.stack_irq))
                0x00000001                . = ASSERT (((__stack_irq_end__ >= __SRAM_segment_start__) && (__stack_irq_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_irq is too large to fit in SRAM memory segment)
                0x000109a8                __stack_fiq_load_start__ = (__stack_irq_end__ ALIGN 0x4)

.stack_fiq      0x000109a8      0x100
                0x000109a8                __stack_fiq_start__ = .
 *(.stack_fiq)
                0x00010aa8                . = (((__stack_fiq_start__ + __STACKSIZE_FIQ__) MAX_K .) ALIGN 0x4)
 *fill*         0x000109a8      0x100 00
                0x00010aa8                __stack_fiq_end__ = (__stack_fiq_start__ + SIZEOF (.stack_fiq))
                0x00000001                . = ASSERT (((__stack_fiq_end__ >= __SRAM_segment_start__) && (__stack_fiq_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_fiq is too large to fit in SRAM memory segment)
                0x00010aa8                __stack_svc_load_start__ = (__stack_fiq_end__ ALIGN 0x4)

.stack_svc      0x00010aa8        0x0
                0x00010aa8                __stack_svc_start__ = .
 *(.stack_svc)
                0x00010aac                . = (((__stack_svc_start__ + __STACKSIZE_SVC__) MAX_K .) ALIGN 0x4)
                0x00010aa8                __stack_svc_end__ = (__stack_svc_start__ + SIZEOF (.stack_svc))
                0x00000001                . = ASSERT (((__stack_svc_end__ >= __SRAM_segment_start__) && (__stack_svc_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_svc is too large to fit in SRAM memory segment)
                0x00010aa8                __stack_abt_load_start__ = (__stack_svc_end__ ALIGN 0x4)

.stack_abt      0x00010aa8        0x0
                0x00010aa8                __stack_abt_start__ = .
 *(.stack_abt)
                0x00010aac                . = (((__stack_abt_start__ + __STACKSIZE_ABT__) MAX_K .) ALIGN 0x4)
                0x00010aa8                __stack_abt_end__ = (__stack_abt_start__ + SIZEOF (.stack_abt))
                0x00000001                . = ASSERT (((__stack_abt_end__ >= __SRAM_segment_start__) && (__stack_abt_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_abt is too large to fit in SRAM memory segment)
                0x00010aa8                __stack_und_load_start__ = (__stack_abt_end__ ALIGN 0x4)

.stack_und      0x00010aa8        0x0
                0x00010aa8                __stack_und_start__ = .
 *(.stack_und)
                0x00010aac                . = (((__stack_und_start__ + __STACKSIZE_UND__) MAX_K .) ALIGN 0x4)
                0x00010aa8                __stack_und_end__ = (__stack_und_start__ + SIZEOF (.stack_und))
                0x00010aa8                __SRAM_segment_used_end__ = ((__stack_abt_end__ ALIGN 0x4) + SIZEOF (.stack_und))
                0x00000001                . = ASSERT (((__stack_und_end__ >= __SRAM_segment_start__) && (__stack_und_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_und is too large to fit in SRAM memory segment)
START GROUP
LOAD ARM Flash Debug/main.o
LOAD ARM Flash Debug/crt0.o
LOAD ARM Flash Debug/Analog_ADuC7000_Startup.o
LOAD ARM Flash Debug/Analog_ADuC7000.o
LOAD ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_a_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libm_v4t_a_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libcpp_v4t_a_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_a_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfscanf_long_v4t_a_le.a
END GROUP
OUTPUT(ARM Flash Debug/MANVFirmware.elf elf32-littlearm)

.debug_abbrev   0x00000000      0x337
 .debug_abbrev  0x00000000       0xc0 ARM Flash Debug/main.o
 .debug_abbrev  0x000000c0       0x14 ARM Flash Debug/crt0.o
 .debug_abbrev  0x000000d4       0x10 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .debug_abbrev  0x000000e4      0x11e ARM Flash Debug/Analog_ADuC7000.o
 .debug_abbrev  0x00000202       0x97 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .debug_abbrev  0x00000299       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_abbrev  0x000002bc       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .debug_abbrev  0x000002df       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .debug_abbrev  0x00000302       0x34 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .debug_abbrev  0x00000336        0x1 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)

.debug_info     0x00000000      0xab8
 .debug_info    0x00000000      0x2b9 ARM Flash Debug/main.o
 .debug_info    0x000002b9       0x98 ARM Flash Debug/crt0.o
 .debug_info    0x00000351       0xb4 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .debug_info    0x00000405      0x3b1 ARM Flash Debug/Analog_ADuC7000.o
 .debug_info    0x000007b6      0x1c5 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .debug_info    0x0000097b       0x32 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_info    0x000009ad       0x6e /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .debug_info    0x00000a1b       0x32 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .debug_info    0x00000a4d       0x6b /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .debug_info    0x00000ab8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)

.debug_line     0x00000000      0x615
 .debug_line    0x00000000       0xaa ARM Flash Debug/main.o
 .debug_line    0x000000aa       0xd3 ARM Flash Debug/crt0.o
 .debug_line    0x0000017d       0xc6 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .debug_line    0x00000243      0x115 ARM Flash Debug/Analog_ADuC7000.o
 .debug_line    0x00000358       0xfa ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .debug_line    0x00000452       0x6a /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_line    0x000004bc       0x68 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .debug_line    0x00000524       0x68 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .debug_line    0x0000058c       0x6c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .debug_line    0x000005f8       0x1d /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)

.debug_frame    0x00000000      0x578
 .debug_frame   0x00000000      0x144 ARM Flash Debug/main.o
 .debug_frame   0x00000144      0x154 ARM Flash Debug/Analog_ADuC7000.o
 .debug_frame   0x00000298       0xc0 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .debug_frame   0x00000358       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__int32_udivmod.o)
 .debug_frame   0x00000378       0x3c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_frame   0x000003b4       0x88 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .debug_frame   0x0000043c       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memcpy.o)
 .debug_frame   0x0000045c       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(memset.o)
 .debug_frame   0x0000047c       0x40 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .debug_frame   0x000004bc       0x9c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .debug_frame   0x00000558       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(strlen.o)

.debug_loc      0x00000000      0x466
 .debug_loc     0x00000000      0x126 ARM Flash Debug/main.o
 .debug_loc     0x00000126      0x126 ARM Flash Debug/Analog_ADuC7000.o
 .debug_loc     0x0000024c       0xa8 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .debug_loc     0x000002f4       0x37 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_loc     0x0000032b       0x7c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .debug_loc     0x000003a7       0x37 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .debug_loc     0x000003de       0x88 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)

.debug_pubnames
                0x00000000      0x1b7
 .debug_pubnames
                0x00000000       0x3a ARM Flash Debug/main.o
 .debug_pubnames
                0x0000003a       0x87 ARM Flash Debug/Analog_ADuC7000.o
 .debug_pubnames
                0x000000c1       0x5c ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .debug_pubnames
                0x0000011d       0x1f /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_pubnames
                0x0000013c       0x3d /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .debug_pubnames
                0x00000179       0x1d /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .debug_pubnames
                0x00000196       0x21 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)

.debug_aranges  0x00000000      0x128
 .debug_aranges
                0x00000000       0x20 ARM Flash Debug/main.o
 .debug_aranges
                0x00000020       0x20 ARM Flash Debug/crt0.o
 .debug_aranges
                0x00000040       0x28 ARM Flash Debug/Analog_ADuC7000_Startup.o
 .debug_aranges
                0x00000068       0x20 ARM Flash Debug/Analog_ADuC7000.o
 .debug_aranges
                0x00000088       0x20 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .debug_aranges
                0x000000a8       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_aranges
                0x000000c8       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .debug_aranges
                0x000000e8       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .debug_aranges
                0x00000108       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)

.comment        0x00000000       0x90
 .comment       0x00000000       0x12 ARM Flash Debug/main.o
 .comment       0x00000012       0x12 ARM Flash Debug/Analog_ADuC7000.o
 .comment       0x00000024       0x12 ARM Flash Debug/Analog_ADuC702x_Eval_Board.o
 .comment       0x00000036       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .comment       0x00000048       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
 .comment       0x0000005a       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
 .comment       0x0000006c       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
 .comment       0x0000007e       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(__hex_lc_uc.o)

.debug_str      0x00000000      0x198
 .debug_str     0x00000000       0x19 ARM Flash Debug/Analog_ADuC7000.o
 .debug_str     0x00000019       0x5f /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(snprintf.o)
 .debug_str     0x00000078       0x63 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_a_le.a(malloc.o)
                                 0x6f (size before relaxing)
 .debug_str     0x000000db       0x48 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_a_le.a(printf.o)
                                 0x5b (size before relaxing)
 .debug_str     0x00000123       0x75 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_a_le.a(__vfprintf_long.o)
                                 0x81 (size before relaxing)
