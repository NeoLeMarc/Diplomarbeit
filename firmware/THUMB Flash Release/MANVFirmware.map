Archive member included because of file (symbol)

/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
                              THUMB Flash Release/main.o (libarm_set_irq)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
                              THUMB Flash Release/random.o (__umodsi3)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
                              THUMB Flash Release/uart.o (__udivsi3)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
                              THUMB Flash Release/zigbit.o (strlen)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
                              THUMB Flash Release/zigbit.o (strcmp)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
                              THUMB Flash Release/ringbuffer.o (snprintf)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
                              THUMB Flash Release/ringbuffer.o (malloc)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o) (memcpy)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o) (memset)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
                              THUMB Flash Release/isr.o (debug_printf)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
                              THUMB Flash Release/ringbuffer.o (printf)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o) (__vfprintf)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o) (__do_debug_operation)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o) (libarm_dcc_write)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o) (libarm_run_dcc_port_server)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o) (libarm_dcc_read)
/opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
                              /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o) (__hex_uc)

Allocating common symbols
Common symbol       size              file

sendBuffer          0x50              THUMB Flash Release/isr.o
outBuffer           0x50              THUMB Flash Release/isr.o
outBufferRing       0x4               THUMB Flash Release/isr.o
inBufferRing        0x4               THUMB Flash Release/isr.o
inBuffer            0x50              THUMB Flash Release/isr.o

Memory Configuration

Name             Origin             Length             Attributes
UNPLACED_SECTIONS 0xffffffff         0x00000000         xw
Memory_Mapped_Registers 0xffff0000         0x00010000         xw
FLASH            0x00080000         0x0000f800         xr
SRAM             0x00010000         0x00002000         xw
*default*        0x00000000         0xffffffff

Linker script and memory map

                0xffff0000                __Memory_Mapped_Registers_segment_start__ = 0xffff0000
                0x00000000                __Memory_Mapped_Registers_segment_end__ = 0x0
                0x00080000                __FLASH_segment_start__ = 0x80000
                0x0008f800                __FLASH_segment_end__ = 0x8f800
                0x00010000                __SRAM_segment_start__ = 0x10000
                0x00012000                __SRAM_segment_end__ = 0x12000
                0x00000400                __STACKSIZE__ = 0x400
                0x00000100                __STACKSIZE_IRQ__ = 0x100
                0x00000100                __STACKSIZE_FIQ__ = 0x100
                0x00000000                __STACKSIZE_SVC__ = 0x0
                0x00000000                __STACKSIZE_ABT__ = 0x0
                0x00000000                __STACKSIZE_UND__ = 0x0
                0x00000400                __HEAPSIZE__ = 0x400
                0x00010000                __vectors_ram_load_start__ = __SRAM_segment_start__

.vectors_ram    0x00010000       0x3c
                0x00010000                __vectors_ram_start__ = .
 *(.vectors_ram)
                0x0001003c                . = ((__vectors_ram_start__ + 0x3c) MAX_K .)
 *fill*         0x00010000       0x3c 00
                0x0001003c                __vectors_ram_end__ = (__vectors_ram_start__ + SIZEOF (.vectors_ram))
                0x00000001                . = ASSERT (((__vectors_ram_end__ >= __SRAM_segment_start__) && (__vectors_ram_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .vectors_ram is too large to fit in SRAM memory segment)
                0x00080000                __vectors_load_start__ = __FLASH_segment_start__

.vectors        0x00080000       0x3c
                0x00080000                __vectors_start__ = .
 *(.vectors .vectors.*)
 .vectors       0x00080000       0x3c THUMB Flash Release/Analog_ADuC7000_Startup.o
                0x00080000                _vectors
                0x0008003c                __vectors_end__ = (__vectors_start__ + SIZEOF (.vectors))
                0x00000001                . = ASSERT (((__vectors_end__ >= __FLASH_segment_start__) && (__vectors_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .vectors is too large to fit in FLASH memory segment)
                0x0008003c                __init_load_start__ = (__vectors_end__ ALIGN 0x4)

.init           0x0008003c      0x234
                0x0008003c                __init_start__ = .
 *(.init .init.*)
 *fill*         0x0008003c        0x4 00
 .init          0x00080040      0x1d0 THUMB Flash Release/crt0.o
                0x00080040                __start
                0x00080040                _start
 .init          0x00080210       0x60 THUMB Flash Release/Analog_ADuC7000_Startup.o
                0x00080210                reset_handler
                0x0008025c                pabort_handler
                0x00080258                swi_handler
                0x00080268                fiq_handler
                0x00080270                __init_end__ = (__init_start__ + SIZEOF (.init))
                0x00000001                . = ASSERT (((__init_end__ >= __FLASH_segment_start__) && (__init_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .init is too large to fit in FLASH memory segment)
                0x00080270                __text_load_start__ = (__init_end__ ALIGN 0x4)

.text           0x00080270     0x18d8
                0x00080270                __text_start__ = .
 *(.text .text.* .glue_7t .glue_7 .gnu.linkonce.t.* .gcc_except_table)
 .text          0x00080270       0xe0 THUMB Flash Release/main.o
                0x00080270                main
 .glue_7        0x00080350        0x0 THUMB Flash Release/main.o
 .glue_7t       0x00080350        0x0 THUMB Flash Release/main.o
 .text          0x00080350       0xe8 THUMB Flash Release/ringbuffer.o
                0x00080384                ringbufferGetLine
                0x00080424                newRingbuffer
                0x00080374                ringbufferGetNextPointer
                0x000803fc                debugRingbuffer
                0x00080350                initRingbuffer
                0x000803c8                ringbufferPutLine
 .glue_7        0x00080438        0x0 THUMB Flash Release/ringbuffer.o
 .glue_7t       0x00080438        0x0 THUMB Flash Release/ringbuffer.o
 .text          0x00080438      0x328 THUMB Flash Release/isr.o
                0x0008061c                undef_handler
                0x000804c8                yellowButton
                0x0008062c                dabort_handler
                0x0008063c                uartISR
                0x00080484                disableAlert
                0x00080438                enableAlert
                0x00080738                buttonISR
                0x000804f4                timerISR
 .glue_7        0x00080760        0x0 THUMB Flash Release/isr.o
 .glue_7t       0x00080760        0x0 THUMB Flash Release/isr.o
 .text          0x00080760       0x3c THUMB Flash Release/random.o
                0x00080760                randint
 .glue_7        0x0008079c        0x0 THUMB Flash Release/random.o
 .glue_7t       0x0008079c        0x0 THUMB Flash Release/random.o
 .text          0x0008079c      0x144 THUMB Flash Release/uart.o
                0x00080828                readStringRaw
                0x000808bc                __putchar
                0x00080860                putInOutbuffer
                0x000807e4                putStringRaw
                0x0008079c                UARTInitialize
                0x00080814                readLine
 .glue_7        0x000808e0        0x0 THUMB Flash Release/uart.o
 .glue_7t       0x000808e0        0x0 THUMB Flash Release/uart.o
 .text          0x000808e0      0x478 THUMB Flash Release/zigbit.o
                0x00080a9c                parseCommand
                0x00080c74                zigBitLoop
                0x000808e0                sleep
                0x00080bc0                extractStatus
                0x00080910                initZigBit
                0x00080b84                isCommand
                0x00080c38                waitForStatus
 .glue_7        0x00080d58        0x0 THUMB Flash Release/zigbit.o
 .glue_7t       0x00080d58        0x0 THUMB Flash Release/zigbit.o
 .text          0x00080d58        0x0 THUMB Flash Release/crt0.o
 .glue_7        0x00080d58        0x0 THUMB Flash Release/crt0.o
 .glue_7t       0x00080d58        0x0 THUMB Flash Release/crt0.o
 .text          0x00080d58        0x0 THUMB Flash Release/Analog_ADuC7000_Startup.o
 .glue_7        0x00080d58        0x0 THUMB Flash Release/Analog_ADuC7000_Startup.o
 .glue_7t       0x00080d58        0x0 THUMB Flash Release/Analog_ADuC7000_Startup.o
 .text          0x00080d58      0x2ec THUMB Flash Release/Analog_ADuC7000.o
                0x00080ed8                ctl_unmask_isr
                0x00081024                ctl_get_ticks_per_second
                0x00080e18                ctl_set_isr
                0x00080fa8                ctl_start_timer
                0x00080eb4                irq_handler
                0x00080f18                ctl_mask_isr
 .glue_7        0x00081044        0x0 THUMB Flash Release/Analog_ADuC7000.o
 .glue_7t       0x00081044        0x0 THUMB Flash Release/Analog_ADuC7000.o
 .text          0x00081044       0x84 THUMB Flash Release/Analog_ADuC702x_Eval_Board.o
                0x00081098                ctl_board_on_button_pressed
                0x00081044                ctl_board_init
                0x00081078                ctl_board_set_leds
 .glue_7        0x000810c8        0x0 THUMB Flash Release/Analog_ADuC702x_Eval_Board.o
 .glue_7t       0x000810c8        0x0 THUMB Flash Release/Analog_ADuC702x_Eval_Board.o
 .text          0x000810c8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
 *fill*         0x000810c8        0x8 00
 .text.libc     0x000810d0       0x30 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
                0x000810d0                ctl_global_interrupts_set
                0x000810d0                libarm_set_irq
 .glue_7        0x00081100        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
 .glue_7t       0x00081100        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
 .text          0x00081100        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
 .text.libc     0x00081100       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
                0x00081100                __umodsi3
                0x00081100                __int32_umod
 .glue_7        0x00081120        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
 .glue_7t       0x00081120        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
 .text          0x00081120        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
 .text.libc     0x00081120       0x30 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
                0x00081120                __int32_udiv
                0x00081120                __int32_udivmod
                0x00081120                __udivsi3
 .glue_7        0x00081150        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
 .glue_7t       0x00081150        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
 .text          0x00081150        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
 .text.libc     0x00081150       0x10 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
                0x00081150                strlen
 .glue_7        0x00081160        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
 .glue_7t       0x00081160        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
 .text          0x00081160        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
 .text.libc     0x00081160       0x14 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
                0x00081160                strcmp
 .glue_7        0x00081174        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
 .glue_7t       0x00081174        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
 .text          0x00081174        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .text.libc     0x00081174       0x28 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
                0x00081174                snprintf
 .glue_7        0x0008119c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .glue_7t       0x0008119c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .text          0x0008119c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .text.libc     0x0008119c      0x160 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
                0x0008119c                malloc
                0x000812d8                calloc
                0x000812ac                realloc
                0x00081210                free
 .glue_7        0x000812fc        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .glue_7t       0x000812fc        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .text          0x000812fc        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
 .text.libc     0x000812fc       0x18 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
                0x000812fc                memcpy
 .glue_7        0x00081314        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
 .glue_7t       0x00081314        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
 .text          0x00081314        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
 .text.libc     0x00081314       0x14 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
                0x00081314                memset
 .glue_7        0x00081328        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
 .glue_7t       0x00081328        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
 .text          0x00081328        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .text.libc     0x00081328       0x14 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
                0x00081328                debug_printf
 .glue_7        0x0008133c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .glue_7t       0x0008133c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .text          0x0008133c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .text.libc     0x0008133c       0x30 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
                0x0008133c                printf
 .glue_7        0x0008136c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .glue_7t       0x0008136c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .text          0x0008136c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .text.libc     0x0008136c      0x578 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
                0x000813dc                __vfprintf
 .glue_7        0x000818e4        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .glue_7t       0x000818e4        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .text          0x000818e4        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .text.libc     0x000818e4       0x64 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
                0x0008191c                __do_nvdebug_operation
                0x000818e4                __do_debug_operation
 .glue_7        0x00081948        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .glue_7t       0x00081948        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .text          0x00081948        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
 *fill*         0x00081948        0x8 00
 .text.libc     0x00081950       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
                0x00081950                libarm_dcc_write
 .glue_7        0x00081970        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
 .glue_7t       0x00081970        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
 .text          0x00081970        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .text.libc     0x00081970      0x160 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
                0x00081970                libarm_run_dcc_port_server
 .glue_7        0x00081ad0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .glue_7t       0x00081ad0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .text          0x00081ad0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)
 .text.libc     0x00081ad0       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)
                0x00081ad0                libarm_dcc_read
 .glue_7        0x00081af0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)
 .glue_7t       0x00081af0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)
 .text          0x00081af0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
 .text.libc     0x00081af0        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
 .glue_7        0x00081af0       0x18 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
                0x00081af0                __undef_handler_from_arm
                0x00081afc                __dabort_handler_from_arm
 .glue_7t       0x00081b08       0x40 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
                0x00081b0c                __ctl_set_isr_change_to_arm
                0x00081b20                __ctl_mask_isr_from_thumb
                0x00081b1c                __libarm_set_irq_change_to_arm
                0x00081b2c                ____umodsi3_change_to_arm
                0x00081b34                ____udivsi3_change_to_arm
                0x00081b38                __libarm_dcc_write_from_thumb
                0x00081b24                __ctl_mask_isr_change_to_arm
                0x00081b18                __libarm_set_irq_from_thumb
                0x00081b10                __ctl_unmask_isr_from_thumb
                0x00081b3c                __libarm_dcc_write_change_to_arm
                0x00081b28                ____umodsi3_from_thumb
                0x00081b30                ____udivsi3_from_thumb
                0x00081b40                __libarm_dcc_read_from_thumb
                0x00081b14                __ctl_unmask_isr_change_to_arm
                0x00081b44                __libarm_dcc_read_change_to_arm
                0x00081b08                __ctl_set_isr_from_thumb
                0x00081b48                __text_end__ = (__text_start__ + SIZEOF (.text))
                0x00000001                . = ASSERT (((__text_end__ >= __FLASH_segment_start__) && (__text_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .text is too large to fit in FLASH memory segment)
                0x00081b48                __dtors_load_start__ = (__text_end__ ALIGN 0x4)

.dtors          0x00081b48        0x0
                0x00081b48                __dtors_start__ = .
 *(SORT(.dtors.*))
 *(.dtors)
                0x00081b48                __dtors_end__ = (__dtors_start__ + SIZEOF (.dtors))
                0x00000001                . = ASSERT (((__dtors_end__ >= __FLASH_segment_start__) && (__dtors_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .dtors is too large to fit in FLASH memory segment)
                0x00081b48                __ctors_load_start__ = (__dtors_end__ ALIGN 0x4)

.ctors          0x00081b48        0x0
                0x00081b48                __ctors_start__ = .
 *(SORT(.ctors.*))
 *(.ctors)
                0x00081b48                __ctors_end__ = (__ctors_start__ + SIZEOF (.ctors))
                0x00000001                . = ASSERT (((__ctors_end__ >= __FLASH_segment_start__) && (__ctors_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .ctors is too large to fit in FLASH memory segment)
                0x00081b48                __rodata_load_start__ = (__ctors_end__ ALIGN 0x4)

.rodata         0x00081b48      0x2cc
                0x00081b48                __rodata_start__ = .
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.str1.4
                0x00081b48       0x3a THUMB Flash Release/ringbuffer.o
                                 0x3c (size before relaxing)
 *fill*         0x00081b82        0x2 00
 .rodata.str1.4
                0x00081b84       0x20 THUMB Flash Release/isr.o
 .rodata.str1.4
                0x00081ba4        0xa THUMB Flash Release/uart.o
                                  0xc (size before relaxing)
 *fill*         0x00081bae        0x2 00
 .rodata.str1.4
                0x00081bb0      0x150 THUMB Flash Release/zigbit.o
                                0x154 (size before relaxing)
 .rodata.libc   0x00081d00       0xc8 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .rodata.libc   0x00081dc8       0x2c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .rodata.libc   0x00081df4       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
                0x00081df4                __hex_uc
                0x00081e04                __hex_lc
                0x00081e14                __rodata_end__ = (__rodata_start__ + SIZEOF (.rodata))
                0x00000001                . = ASSERT (((__rodata_end__ >= __FLASH_segment_start__) && (__rodata_end__ <= (__FLASH_segment_start__ + 0xf800))), error: .rodata is too large to fit in FLASH memory segment)
                0x00081e14                __fast_load_start__ = (__rodata_end__ ALIGN 0x4)

.fast           0x0001003c        0x0 load address 0x00081e14
                0x0001003c                __fast_start__ = .
 *(.fast .fast.*)
                0x0001003c                __fast_end__ = (__fast_start__ + SIZEOF (.fast))
                0x00081e14                __fast_load_end__ = (__fast_load_start__ + SIZEOF (.fast))
                0x00000001                . = ASSERT ((((__fast_load_start__ + SIZEOF (.fast)) >= __FLASH_segment_start__) && ((__fast_load_start__ + SIZEOF (.fast)) <= (__FLASH_segment_start__ + 0xf800))), error: .fast is too large to fit in FLASH memory segment)

.fast_run       0x0001003c        0x0
                0x0001003c                __fast_run_start__ = .
                0x0001003c                . = ((__fast_run_start__ + SIZEOF (.fast)) MAX_K .)
                0x0001003c                __fast_run_end__ = (__fast_run_start__ + SIZEOF (.fast_run))
                0x00000001                . = ASSERT (((__fast_run_end__ >= __SRAM_segment_start__) && (__fast_run_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .fast_run is too large to fit in SRAM memory segment)
                0x00081e14                __data_load_start__ = ((__fast_load_start__ + SIZEOF (.fast)) ALIGN 0x4)

.data           0x0001003c       0x10 load address 0x00081e14
                0x0001003c                __data_start__ = .
 *(.data .data.* .gnu.linkonce.d.*)
 .data          0x0001003c        0x0 THUMB Flash Release/main.o
 .data          0x0001003c        0x0 THUMB Flash Release/ringbuffer.o
 .data          0x0001003c        0x8 THUMB Flash Release/isr.o
 .data          0x00010044        0x4 THUMB Flash Release/random.o
                0x00010044                currentRandomNumber
 .data          0x00010048        0x0 THUMB Flash Release/uart.o
 .data          0x00010048        0x0 THUMB Flash Release/zigbit.o
 .data          0x00010048        0x0 THUMB Flash Release/crt0.o
 .data          0x00010048        0x0 THUMB Flash Release/Analog_ADuC7000_Startup.o
 .data          0x00010048        0x0 THUMB Flash Release/Analog_ADuC7000.o
 .data          0x00010048        0x0 THUMB Flash Release/Analog_ADuC702x_Eval_Board.o
 .data          0x00010048        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
 .data          0x00010048        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
 .data          0x00010048        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
 .data          0x00010048        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
 .data          0x00010048        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
 .data          0x00010048        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .data          0x00010048        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .data.libc     0x00010048        0x4 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)
 .data          0x0001004c        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
                0x0001004c                __data_end__ = (__data_start__ + SIZEOF (.data))
                0x00081e24                __data_load_end__ = (__data_load_start__ + SIZEOF (.data))
                0x00081e24                __FLASH_segment_used_end__ = (((__fast_load_start__ + SIZEOF (.fast)) ALIGN 0x4) + SIZEOF (.data))
                0x00000001                . = ASSERT ((((__data_load_start__ + SIZEOF (.data)) >= __FLASH_segment_start__) && ((__data_load_start__ + SIZEOF (.data)) <= (__FLASH_segment_start__ + 0xf800))), error: .data is too large to fit in FLASH memory segment)

.data_run       0x0001003c       0x10
                0x0001003c                __data_run_start__ = .
                0x0001004c                . = ((__data_run_start__ + SIZEOF (.data)) MAX_K .)
 *fill*         0x0001003c       0x10 00
                0x0001004c                __data_run_end__ = (__data_run_start__ + SIZEOF (.data_run))
                0x00000001                . = ASSERT (((__data_run_end__ >= __SRAM_segment_start__) && (__data_run_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .data_run is too large to fit in SRAM memory segment)
                0x0001004c                __bss_load_start__ = (__data_run_end__ ALIGN 0x4)

.bss            0x0001004c      0x184
                0x0001004c                __bss_start__ = .
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss           0x0001004c        0x0 THUMB Flash Release/main.o
 .bss           0x0001004c        0x0 THUMB Flash Release/ringbuffer.o
 .bss           0x0001004c       0x1c THUMB Flash Release/isr.o
                0x0001004c                inBuffPos
                0x0001005c                mute
                0x00010058                sendBuffEnd
                0x00010050                outBuffPos
                0x00010054                sendBuffPos
                0x00010060                yellowCode
 .bss           0x00010068        0x0 THUMB Flash Release/random.o
 .bss           0x00010068        0x0 THUMB Flash Release/uart.o
 .bss           0x00010068        0x8 THUMB Flash Release/zigbit.o
                0x00010068                sendStatus
                0x0001006c                alertStatus
 .bss           0x00010070        0x0 THUMB Flash Release/crt0.o
 .bss           0x00010070        0x0 THUMB Flash Release/Analog_ADuC7000_Startup.o
 .bss           0x00010070       0x64 THUMB Flash Release/Analog_ADuC7000.o
 .bss           0x000100d4        0x4 THUMB Flash Release/Analog_ADuC702x_Eval_Board.o
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)
 .bss           0x000100d8        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)
 *(COMMON)
 COMMON         0x000100d8       0xf8 THUMB Flash Release/isr.o
                0x000100d8                sendBuffer
                0x00010128                outBuffer
                0x00010178                outBufferRing
                0x0001017c                inBufferRing
                0x00010180                inBuffer
                0x000101d0                __bss_end__ = (__bss_start__ + SIZEOF (.bss))
                0x00000001                . = ASSERT (((__bss_end__ >= __SRAM_segment_start__) && (__bss_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .bss is too large to fit in SRAM memory segment)
                0x000101d0                __non_init_load_start__ = (__bss_end__ ALIGN 0x4)

.non_init       0x000101d0        0x0
                0x000101d0                __non_init_start__ = .
 *(.non_init .non_init.*)
                0x000101d0                __non_init_end__ = (__non_init_start__ + SIZEOF (.non_init))
                0x00000001                . = ASSERT (((__non_init_end__ >= __SRAM_segment_start__) && (__non_init_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .non_init is too large to fit in SRAM memory segment)
                0x000101d0                __heap_load_start__ = (__non_init_end__ ALIGN 0x4)

.heap           0x000101d0      0x400
                0x000101d0                __heap_start__ = .
 *(.heap)
                0x000105d0                . = (((__heap_start__ + __HEAPSIZE__) MAX_K .) ALIGN 0x4)
 *fill*         0x000101d0      0x400 00
                0x000105d0                __heap_end__ = (__heap_start__ + SIZEOF (.heap))
                0x00000001                . = ASSERT (((__heap_end__ >= __SRAM_segment_start__) && (__heap_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .heap is too large to fit in SRAM memory segment)
                0x000105d0                __stack_load_start__ = (__heap_end__ ALIGN 0x4)

.stack          0x000105d0      0x400
                0x000105d0                __stack_start__ = .
 *(.stack)
                0x000109d0                . = (((__stack_start__ + __STACKSIZE__) MAX_K .) ALIGN 0x4)
 *fill*         0x000105d0      0x400 00
                0x000109d0                __stack_end__ = (__stack_start__ + SIZEOF (.stack))
                0x00000001                . = ASSERT (((__stack_end__ >= __SRAM_segment_start__) && (__stack_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack is too large to fit in SRAM memory segment)
                0x000109d0                __stack_irq_load_start__ = (__stack_end__ ALIGN 0x4)

.stack_irq      0x000109d0      0x100
                0x000109d0                __stack_irq_start__ = .
 *(.stack_irq)
                0x00010ad0                . = (((__stack_irq_start__ + __STACKSIZE_IRQ__) MAX_K .) ALIGN 0x4)
 *fill*         0x000109d0      0x100 00
                0x00010ad0                __stack_irq_end__ = (__stack_irq_start__ + SIZEOF (.stack_irq))
                0x00000001                . = ASSERT (((__stack_irq_end__ >= __SRAM_segment_start__) && (__stack_irq_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_irq is too large to fit in SRAM memory segment)
                0x00010ad0                __stack_fiq_load_start__ = (__stack_irq_end__ ALIGN 0x4)

.stack_fiq      0x00010ad0      0x100
                0x00010ad0                __stack_fiq_start__ = .
 *(.stack_fiq)
                0x00010bd0                . = (((__stack_fiq_start__ + __STACKSIZE_FIQ__) MAX_K .) ALIGN 0x4)
 *fill*         0x00010ad0      0x100 00
                0x00010bd0                __stack_fiq_end__ = (__stack_fiq_start__ + SIZEOF (.stack_fiq))
                0x00000001                . = ASSERT (((__stack_fiq_end__ >= __SRAM_segment_start__) && (__stack_fiq_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_fiq is too large to fit in SRAM memory segment)
                0x00010bd0                __stack_svc_load_start__ = (__stack_fiq_end__ ALIGN 0x4)

.stack_svc      0x00010bd0        0x0
                0x00010bd0                __stack_svc_start__ = .
 *(.stack_svc)
                0x00010bd4                . = (((__stack_svc_start__ + __STACKSIZE_SVC__) MAX_K .) ALIGN 0x4)
                0x00010bd0                __stack_svc_end__ = (__stack_svc_start__ + SIZEOF (.stack_svc))
                0x00000001                . = ASSERT (((__stack_svc_end__ >= __SRAM_segment_start__) && (__stack_svc_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_svc is too large to fit in SRAM memory segment)
                0x00010bd0                __stack_abt_load_start__ = (__stack_svc_end__ ALIGN 0x4)

.stack_abt      0x00010bd0        0x0
                0x00010bd0                __stack_abt_start__ = .
 *(.stack_abt)
                0x00010bd4                . = (((__stack_abt_start__ + __STACKSIZE_ABT__) MAX_K .) ALIGN 0x4)
                0x00010bd0                __stack_abt_end__ = (__stack_abt_start__ + SIZEOF (.stack_abt))
                0x00000001                . = ASSERT (((__stack_abt_end__ >= __SRAM_segment_start__) && (__stack_abt_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_abt is too large to fit in SRAM memory segment)
                0x00010bd0                __stack_und_load_start__ = (__stack_abt_end__ ALIGN 0x4)

.stack_und      0x00010bd0        0x0
                0x00010bd0                __stack_und_start__ = .
 *(.stack_und)
                0x00010bd4                . = (((__stack_und_start__ + __STACKSIZE_UND__) MAX_K .) ALIGN 0x4)
                0x00010bd0                __stack_und_end__ = (__stack_und_start__ + SIZEOF (.stack_und))
                0x00010bd0                __SRAM_segment_used_end__ = ((__stack_abt_end__ ALIGN 0x4) + SIZEOF (.stack_und))
                0x00000001                . = ASSERT (((__stack_und_end__ >= __SRAM_segment_start__) && (__stack_und_end__ <= (__SRAM_segment_start__ + 0x2000))), error: .stack_und is too large to fit in SRAM memory segment)
START GROUP
LOAD THUMB Flash Release/main.o
LOAD THUMB Flash Release/ringbuffer.o
LOAD THUMB Flash Release/isr.o
LOAD THUMB Flash Release/random.o
LOAD THUMB Flash Release/uart.o
LOAD THUMB Flash Release/zigbit.o
LOAD THUMB Flash Release/crt0.o
LOAD THUMB Flash Release/Analog_ADuC7000_Startup.o
LOAD THUMB Flash Release/Analog_ADuC7000.o
LOAD THUMB Flash Release/Analog_ADuC702x_Eval_Board.o
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libm_v4t_t_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libcpp_v4t_t_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a
LOAD /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfscanf_long_v4t_t_le.a
END GROUP
OUTPUT(THUMB Flash Release/MANVFirmware.elf elf32-littlearm)

.comment        0x00000000      0x120
 .comment       0x00000000       0x12 THUMB Flash Release/main.o
 .comment       0x00000012       0x12 THUMB Flash Release/ringbuffer.o
 .comment       0x00000024       0x12 THUMB Flash Release/isr.o
 .comment       0x00000036       0x12 THUMB Flash Release/random.o
 .comment       0x00000048       0x12 THUMB Flash Release/uart.o
 .comment       0x0000005a       0x12 THUMB Flash Release/zigbit.o
 .comment       0x0000006c       0x12 THUMB Flash Release/Analog_ADuC7000.o
 .comment       0x0000007e       0x12 THUMB Flash Release/Analog_ADuC702x_Eval_Board.o
 .comment       0x00000090       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .comment       0x000000a2       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .comment       0x000000b4       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .comment       0x000000c6       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .comment       0x000000d8       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .comment       0x000000ea       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .comment       0x000000fc       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .comment       0x0000010e       0x12 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)

.debug_frame    0x00000000      0x394
 .debug_frame   0x00000000       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_set_irq.o)
 .debug_frame   0x00000020       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_umod.o)
 .debug_frame   0x00000040       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__int32_udivmod.o)
 .debug_frame   0x00000060       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strlen.o)
 .debug_frame   0x00000080       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(strcmp.o)
 .debug_frame   0x000000a0       0x3c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_frame   0x000000dc       0x90 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .debug_frame   0x0000016c       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memcpy.o)
 .debug_frame   0x0000018c       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(memset.o)
 .debug_frame   0x000001ac       0x30 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .debug_frame   0x000001dc       0x38 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .debug_frame   0x00000214       0xa0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .debug_frame   0x000002b4       0x68 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .debug_frame   0x0000031c       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_write.o)
 .debug_frame   0x0000033c       0x38 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .debug_frame   0x00000374       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarmdi_dcc_read.o)

.debug_abbrev   0x00000000      0x107
 .debug_abbrev  0x00000000       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_abbrev  0x00000023       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .debug_abbrev  0x00000046       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .debug_abbrev  0x00000069       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .debug_abbrev  0x0000008c       0x34 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .debug_abbrev  0x000000c0       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .debug_abbrev  0x000000e3       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .debug_abbrev  0x00000106        0x1 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)

.debug_info     0x00000000      0x263
 .debug_info    0x00000000       0x32 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_info    0x00000032       0x6e /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .debug_info    0x000000a0       0x32 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .debug_info    0x000000d2       0x32 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .debug_info    0x00000104       0x6b /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .debug_info    0x0000016f       0xc2 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .debug_info    0x00000231       0x32 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .debug_info    0x00000263        0x0 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)

.debug_line     0x00000000      0x325
 .debug_line    0x00000000       0x6a /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_line    0x0000006a       0x68 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .debug_line    0x000000d2       0x6e /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .debug_line    0x00000140       0x68 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .debug_line    0x000001a8       0x6c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .debug_line    0x00000214       0x74 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .debug_line    0x00000288       0x80 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
 .debug_line    0x00000308       0x1d /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(__hex_lc_uc.o)

.debug_loc      0x00000000      0x243
 .debug_loc     0x00000000       0x37 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_loc     0x00000037       0x7c /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .debug_loc     0x000000b3       0x2b /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .debug_loc     0x000000de       0x37 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .debug_loc     0x00000115       0x95 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .debug_loc     0x000001aa       0x6e /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .debug_loc     0x00000218       0x2b /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)

.debug_pubnames
                0x00000000      0x134
 .debug_pubnames
                0x00000000       0x1f /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_pubnames
                0x0000001f       0x3d /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .debug_pubnames
                0x0000005c       0x23 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .debug_pubnames
                0x0000007f       0x1d /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .debug_pubnames
                0x0000009c       0x21 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .debug_pubnames
                0x000000bd       0x46 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .debug_pubnames
                0x00000103       0x31 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)

.debug_aranges  0x00000000       0xe0
 .debug_aranges
                0x00000000       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_aranges
                0x00000020       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
 .debug_aranges
                0x00000040       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
 .debug_aranges
                0x00000060       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
 .debug_aranges
                0x00000080       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
 .debug_aranges
                0x000000a0       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(__debug_operations.o)
 .debug_aranges
                0x000000c0       0x20 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)

.debug_str      0x00000000      0x255
 .debug_str     0x00000000       0x5f /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(snprintf.o)
 .debug_str     0x0000005f       0x63 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_v4t_t_le.a(malloc.o)
                                 0x6f (size before relaxing)
 .debug_str     0x000000c2       0x5b /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libdebugio_v4t_t_le.a(debug_printf.o)
                                 0x67 (size before relaxing)
 .debug_str     0x0000011d       0x48 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libc_targetio_impl_v4t_t_le.a(printf.o)
                                 0x5b (size before relaxing)
 .debug_str     0x00000165       0x75 /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/lib_vfprintf_long_v4t_t_le.a(__vfprintf_long.o)
                                 0x81 (size before relaxing)
 .debug_str     0x000001da       0x7b /opt/Rowley Associates Limited/CrossWorks for ARM 1.7/lib/libarmdi_v4t_t_le.a(libarm_run_dcc_port_server.o)
                                 0x87 (size before relaxing)
